<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on DevJev.nl | Azure, Cloud Security &amp; DevOps Insights for IT Professionals</title>
    <link>https://www.devjev.nl/tags/security/</link>
    <description>Recent content in Security on DevJev.nl | Azure, Cloud Security &amp; DevOps Insights for IT Professionals</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 30 Jan 2022 08:00:00 +0100</lastBuildDate>
    <atom:link href="https://www.devjev.nl/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I am in your pipeline reading all your secrets!</title>
      <link>https://www.devjev.nl/posts/2022/i-am-in-your-pipeline-reading-all-your-secrets/</link>
      <pubDate>Sun, 30 Jan 2022 08:00:00 +0100</pubDate>
      <guid>https://www.devjev.nl/posts/2022/i-am-in-your-pipeline-reading-all-your-secrets/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;With this blog post I want to raise awareness and understanding on how secure / marked as secret variables are handled during pipeline runtime in Azure DevOps and how these can be potentially exfiltrated. If proper security configuration is not in place this could potentially be abused by attackers.&lt;/p&gt;&#xA;&lt;p&gt;Lets move ahead to create different types of variables and try to retrieve their values. By doing so at the end of this blog post it will be clear why it&amp;rsquo;s not very sensible to give all project team members full access to pipelines. And why in some cases it&amp;rsquo;s better to set-up private build agents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hacking Azure DevOps</title>
      <link>https://www.devjev.nl/posts/2021/hacking-azure-devops/</link>
      <pubDate>Wed, 19 May 2021 12:00:00 +0200</pubDate>
      <guid>https://www.devjev.nl/posts/2021/hacking-azure-devops/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;While this case is not a particularly new one and has been posted by Matt Cooper on &lt;a href=&#34;https://devblogs.microsoft.com/devops/pipeline-stealing-another-repo/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;devblogs.microsoft.com&lt;/a&gt;&#xA; back in August 2020. I still feel that in relation to the possible data spillage it has not received sufficient exposure and the correct amount of awareness I would have expected. I actually stumbled upon this case by accident when playing with the Azure DevOps Library variables API.&lt;/p&gt;&#xA;&lt;p&gt;So in this post I want to showcase how a possible attacker can use a compromised developers environment to gain access to almost all the data present in an Azure DevOps Organization. While access of the developers environment in question is limited to just a single Azure DevOps Project.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
