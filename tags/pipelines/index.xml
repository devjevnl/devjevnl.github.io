<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Pipelines - Tag - DevJev.nl | Azure, Cloud Security &amp; DevOps Insights for IT Professionals</title>
        <link>https://www.devjev.nl/tags/pipelines/</link>
        <description>Pipelines - Tag - DevJev.nl | Azure, Cloud Security &amp; DevOps Insights for IT Professionals</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 14 Jun 2024 02:00:00 &#43;0200</lastBuildDate><atom:link href="https://www.devjev.nl/tags/pipelines/" rel="self" type="application/rss+xml" /><item>
    <title>üöÄ‚ú® I am in your pipeline, decorating it with compliance üõ†Ô∏èüîí</title>
    <link>https://www.devjev.nl/posts/2024/i-am-in-your-pipeline-decorating-it-with-compliance/</link>
    <pubDate>Fri, 14 Jun 2024 02:00:00 &#43;0200</pubDate>
    <author>Jev</author>
    <guid>https://www.devjev.nl/posts/2024/i-am-in-your-pipeline-decorating-it-with-compliance/</guid>
    <description><![CDATA[<p>Back in 2022 I wrote a blog post <a href="https://www.devjev.nl/posts/2022/i-am-in-your-pipeline-reading-all-your-secrets/" target="_blank" rel="noopener noreffer">I am in your pipeline reading all your secrets!</a>
 about how secrets can be leaked in <code>Azure Pipelines</code>.
I think it&rsquo;s time to offset that blog post and have a look at how compliance of all pipelines in a single <a href="https://learn.microsoft.com/en-us/azure/devops/organizations/projects/create-project?view=azure-devops&amp;tabs=browser" target="_blank" rel="noopener noreffer">Azure DevOps Project</a>
 can be achieved. This is done by using a feature called <a href="https://learn.microsoft.com/en-us/azure/devops/extend/develop/add-pipeline-decorator?view=azure-devops&amp;wt.mc_id=DT-MVP-5005327" target="_blank" rel="noopener noreffer">Pipeline Decorators</a>
.</p>
<h2 id="what-are-pipeline-decorators">What are pipeline decorators?</h2>
<p>In most organizations there are certain required compliance and security policies. For example; to be compliant with corporate policies a static code analysis tool must to be executed on all pipelines before executing the actual pipeline tasks. This is where pipeline decorators come in, pipeline authors don&rsquo;t need to remember to add that step. We as <code>Azure DevOps Organization</code> owners create a decorator that automatically injects the step into all pipelines during their runtime. Ensuring on an <code>Azure DevOps Organization</code> level that all pipelines are compliant with our organization&rsquo;s policies.</p>]]></description>
</item>
<item>
    <title>Your service connection credentials are mine</title>
    <link>https://www.devjev.nl/posts/2022/your-service-connection-credentials-are-mine/</link>
    <pubDate>Sat, 12 Mar 2022 21:00:00 &#43;0100</pubDate>
    <author>Jev</author>
    <guid>https://www.devjev.nl/posts/2022/your-service-connection-credentials-are-mine/</guid>
    <description><![CDATA[<p>Like with the two previous posts <a href="/posts/2022/hacking-azure-devops" rel="">Hacking Azure DevOps</a>
 and <a href="/posts/2022/i-am-in-your-pipeline-reading-all-your-secrets" rel="">I am in your pipeline reading all your secrets!</a>
 I want to continue to raise awareness and understanding about pipeline security in Azure DevOps. In the previous post I have explained how secure / marked as secret variables are handled during pipeline runtime.<br>
In this post I want to show how an Azure Resource Manager service connection configuration is handled during pipeline runtime. And which sensitive information is exposed through this service connection.<br>
Like I mentioned in the  previous posts, without proper security configuration for pipelines this information could be abused by attackers.</p>]]></description>
</item>
<item>
    <title>I am in your pipeline reading all your secrets!</title>
    <link>https://www.devjev.nl/posts/2022/i-am-in-your-pipeline-reading-all-your-secrets/</link>
    <pubDate>Sun, 30 Jan 2022 08:00:00 &#43;0100</pubDate>
    <author>Jev</author>
    <guid>https://www.devjev.nl/posts/2022/i-am-in-your-pipeline-reading-all-your-secrets/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>With this blog post I want to raise awareness and understanding on how secure / marked as secret variables are handled during pipeline runtime in Azure DevOps and how these can be potentially exfiltrated. If proper security configuration is not in place this could potentially be abused by attackers.</p>
<p>Lets move ahead to create different types of variables and try to retrieve their values. By doing so at the end of this blog post it will be clear why it&rsquo;s not very sensible to give all project team members full access to pipelines. And why in some cases it&rsquo;s better to set-up private build agents.</p>]]></description>
</item>
<item>
    <title>Hacking Azure DevOps</title>
    <link>https://www.devjev.nl/posts/2021/hacking-azure-devops/</link>
    <pubDate>Wed, 19 May 2021 12:00:00 &#43;0200</pubDate>
    <author>Jev</author>
    <guid>https://www.devjev.nl/posts/2021/hacking-azure-devops/</guid>
    <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>While this case is not a particularly new one and has been posted by Matt Cooper on <a href="https://devblogs.microsoft.com/devops/pipeline-stealing-another-repo/" target="_blank" rel="noopener noreffer">devblogs.microsoft.com</a>
 back in August 2020. I still feel that in relation to the possible data spillage it has not received sufficient exposure and the correct amount of awareness I would have expected. I actually stumbled upon this case by accident when playing with the Azure DevOps Library variables API.</p>
<p>So in this post I want to showcase how a possible attacker can use a compromised developers environment to gain access to almost all the data present in an Azure DevOps Organization. While access of the developers environment in question is limited to just a single Azure DevOps Project.</p>]]></description>
</item>
</channel>
</rss>
